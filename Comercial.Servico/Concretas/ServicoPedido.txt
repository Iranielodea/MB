using Comercial.Dominio.Entidades;
using Comercial.Dominio.Interfaces.Repositorio;
using Comercial.Dominio.Interfaces.Servico;
using Comercial.Infra.Repositorio;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using static Comercial.Dominio.Enumeradores.Enumerador;

namespace Comercial.Servico.Concretas
{
    public class ServicoPedido : IServicoPedido
    {
        private readonly string _tabela;
        private readonly IRepositorioPedido _repositorioPedido;
        private readonly IServicoPermissao _servicoPermissao;
        private readonly IRepositorioPedidoConsulta _repositorioPedidoConsulta;

        public ServicoPedido(IDbConnection conexao, IDbTransaction transaction, IRepositorioPedido repositorioPedido,
            IRepositorioPedidoConsulta repositorioPedidoConsulta, IServicoPermissao servicoPermissao)
        {
            _repositorioPedido = repositorioPedido;
            _repositorioPedidoConsulta = repositorioPedidoConsulta;
            _servicoPermissao = servicoPermissao;
            _tabela = "PEDIDO";
        }

        public Pedido ObterPorId(int id)
        {
            return _repositorioPedido.GetById(id);
        }

        public void Excluir(Pedido pedido, string nomeUsuario)
        {
            try
            {
                _servicoPermissao.Permitir(AcaoUsuario.Excluir, _tabela, nomeUsuario);
                _repositorioPedido.Delete(pedido);
            }
            catch (Exception ex)
            {

                throw new Exception(ex.Message);
            }
        }

        public int Salvar(Pedido pedido, string nomeUsuario)
        {
            if (pedido.Cod_Cliente == 0)
                throw new Exception("O cliente é obrigatório!");
            if (pedido.Cod_For == 0)
                throw new Exception("O fornecedor é obrigatório!");

            CalcularTotalPedido(pedido);

            try
            {
                if (pedido.Num_Pedido == 0)
                {
                    _servicoPermissao.Permitir(AcaoUsuario.Incluir, _tabela, nomeUsuario);
                    pedido.Usu_Inc = Geral.PermissaoUsuario.GravarUsuarioDataHora(nomeUsuario);
                    _repositorioPedido.Insert(ref pedido);
                }
                else
                {
                    _servicoPermissao.Permitir(AcaoUsuario.Alterar, _tabela, nomeUsuario);
                    pedido.Usu_Alt = Geral.PermissaoUsuario.GravarUsuarioDataHora(nomeUsuario);
                    _repositorioPedido.Update(pedido);
                }

                // trocar cliente contas
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }

            return pedido.Num_Pedido;
        }

        public IEnumerable<PedidoConsulta> Filtrar(string campo, string valor, int codEmpresa, PedidoFiltro pedidoFiltro, int id = 0)
        {
            return _repositorioPedidoConsulta.Filtrar(campo, valor, codEmpresa, pedidoFiltro, id);
        }

        public Pedido ObterPedido(int idPedido)
        {
            return _repositorioPedido.ObterPedido(idPedido);
        }

        private void CalcularTotalPedido(Pedido pedido)
        {
            pedido.Total_Liquido = pedido.PedidoItems.Sum(x => x.Valor_Total);
            pedido.Total_Venda = pedido.PedidoItems.Sum(x => x.Total_Venda);
            pedido.Total_Lucro = pedido.PedidoItems.Sum(x => x.Total_Lucro);
            pedido.Total_Qtde = pedido.PedidoItems.Sum(x => x.Qtde);
            pedido.Valor_Lucro = pedido.PedidoItems.Sum(x => x.Valor_Lucro);

            pedido.Total_Comissao = pedido.Total_Qtde * pedido.Valor_Comissao;
        }

        private void CalcularTotalItem(PedidoItem pedidoItem)
        {
            pedidoItem.Valor_Total = pedidoItem.Qtde * pedidoItem.Valor;
            pedidoItem.Valor_Lucro = pedidoItem.Preco_Venda - pedidoItem.Valor;
            pedidoItem.Total_Lucro = pedidoItem.Valor_Lucro * pedidoItem.Qtde;
            pedidoItem.Total_Venda = pedidoItem.Preco_Venda * pedidoItem.Qtde;
        }
    }
}
